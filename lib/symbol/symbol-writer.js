/* jshint node: true, esversion: 6 */
'use strict';

var fs = require('fs-extra');
var path = require('path');
var merge = require('deepmerge');

/**
 * A class to write R.java classes based on data read from text symbol files generated by
 * aapt with the --output-text-symbols option.
 *
 * JS port of the same class from the Android Gradle plugin
 *
 * @see https://android.googlesource.com/platform/tools/build/+/master/builder/src/main/java/com/android/builder/internal/SymbolWriter.java
 */
class SymbolWriter {
  /**
   * Constructs a new SymbolWriter
   *
   * @param {String} outputPath Path where to store the genrated R class
   * @param {String} packageName Package name of the genrated R class
   */
  constructor(outputPath, packageName, fullValues) {
    this.outputPath = outputPath;
    this.packageName = packageName;
    this.fullValues = fullValues;
    this.symbols = [];
  }

  /**
   * Adds a SymbolLoder to this writer
   *
   * @param {SymbolLoader} symbolLoader A symbol loader instance
   */
  addSymbolsToWrite(symbolLoader) {
    this.symbols.push(symbolLoader);
  }

  /**
   * Writes the symbols from all SymbolLoaders to a new R.java
   */
  write() {
    var rClassContent = '/* AUTO-GENERATED FILE.  DO NOT MODIFY.\n';
    rClassContent += ' *\n';
    rClassContent += ' * This class was automatically generated by the\n';
    rClassContent += ' * aapt tool from the resource data it found.  It\n';
    rClassContent += ' * should not be modified by hand.\n';
    rClassContent += ' */\n';
    rClassContent += 'package ' + this.packageName + ';\n\n';
    rClassContent += 'public final class R {\n';

    var symbols = this.getAllSymbols();
    Object.keys(symbols).forEach((className) => {
      rClassContent += '\tpublic static final class ' + className + ' {\n';
      var resourceClassEntries = symbols[className];
      Object.keys(resourceClassEntries).forEach((symbolName) => {
        var value = this.fullValues.symbols[className] && this.fullValues.symbols[className][symbolName];
        if (typeof value !== 'undefined') {
          rClassContent += '\t\tpublic static final ' + value.type + ' ' + value.name + ' = ' + value.value + ';\n';
        }
      });
      rClassContent += '\t}\n';
    });

    rClassContent += '}\n';

    var subFolderPath = this.packageName.replace(/\./g, '/');
    var libraryRClassPath = path.join(this.outputPath, subFolderPath);
    fs.ensureDirSync(libraryRClassPath);
    var libraryRClassPathAndFilename = path.join(libraryRClassPath, 'R.java');
    fs.writeFileSync(libraryRClassPathAndFilename, rClassContent);
  }

  /**
   * Returns a new object containing all merged symbols.
   *
   * @return {Object}
   */
  getAllSymbols() {
    if (this.symbols.length > 1) {
      return merge.all(this.symbols.map((symbolLoader) => {
        return symbolLoader.symbols;
      }));
    }
    return this.symbols[0].symbols;
  }
}

module.exports = SymbolWriter;
